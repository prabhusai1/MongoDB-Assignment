INSERT THE FOLLOWING DOCUMENTS INTO A MOVIES COLLECTION

1) title : Fight Club writer : Chuck Palahniuko year : 1999 actors : [ Brad Pitt Edward Norton ]
db.movies.insert({  title : "Fight Club", writer : "Chuck Palahniuko", year : 1999,  actors : [ "Brad Pitt","Edward Norton" ] })

2) title : Pulp Fiction writer : Quentin Tarantino year : 1994 actors : [ John Travolta Uma Thurman ]
db.movies.insert({title : "Pulp Fiction", writer : "Quentin Tarantino",  year : 1994, actors : [ "John Travolta","Uma Thurman" ] })

3) title : Inglorious Basterds writer : Quentin Tarantino year : 2009 actors : [ Brad Pitt Diane Kruger Eli Roth ]
db.movies.insert({title : "Inglorious Basterds", writer : "Quentin Tarantino",  year : 2009,  actors : [ "Brad Pitt", "Diane Kruger", "Eli Roth" ]})

4)title : The Hobbit: An Unexpected Journey writer : J.R.R. Tolkein year : 2012 franchise : The Hobbit
db.movies.insert({title : "The Hobbit: An Unexpected Journey", writer : "J.R.R. Tolkein",  year : 2012, franchise : "The Hobbit" })

5)title : The Hobbit: The Desolation of Smaug writer : J.R.R. Tolkein
year : 2013
franchise : The Hobbit
db.movies.insert({title : "The Hobbit: The Desolation of Smaug", writer : "J.R.R. Tolkein", year : 2013, franchise : "The Hobbit"})

6)title : The Hobbit: The Battle of the Five Armies
writer : J.R.R. Tolkein
year : 2012
franchise : The Hobbit
synopsis : Bilbo and Company are forced to engage in a war against an array of
combatants and keep the Lonely Mountain from falling into the hands of a rising
darkness
db.movies.insert({title : "The Hobbit: The Battle of the Five Armies", writer : "J.R.R. Tolkein", year : 2012, franchise : "The Hobbit", synopsis : "Bilbo and Company are forced to engage in a war against an array of a rising darkness" })

7)title : Pee Wee Herman's Big Adventure
db.movies.insert({ title : "Pee Wee Herman's Big Adventure" })

8) title : Avatar
db.movies.insert({ title : "Avatar" })

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
QUERY THE MOVIES COLLECTION TO

9) get all documents
db.movies.find()

10) get all documents with writer set to "Quentin Tarantino"
db.movies.find({ writer:"Quentin Tarantino"})

11) get all documents where actors include "Brad Pitt"
db.movies.find( {actors: {$in: ['Brad Pitt']} })

12) get all documents with franchise set to "The Hobbit"
db.movies.find({ franchise:"The Hobbit"})

13)get all movies released in the 90s
 db.movies.find({ year: {$lt:2000, $gt:1989} })
 
 db.movies.find({$and: [{year:{$gt:1989}},{year:{$lt:2000}}]}).pretty() 
 

 
14) get all movies released before the year 2000 or after 2010
db.movies.find( { $or: [ { year: { $lt: 2000}},{year:{ $gt: 2010 } }]})


--------------------------------------------------------------------------------------------------------------------------------------------------
15) add a synopsis to "The Hobbit: An Unexpected Journey" : "A reluctant hobbit,
Bilbo Baggins, sets out to the Lonely Mountain with a spirited group of
dwarves to reclaim their mountain home - and the gold within it - from the
dragon Smaug."

db.movies.update(
{title: "The Hobbit: An Unexpected Journey"},
{$set: {synopsis: "A reluctant hobbit, Bilbo Baggins, sets out to the Lonely Mountain with a spirited group of dwarves to reclaim their mountain home - and the gold within it - from the dragon Smaug." }})



16) add a synopsis to "The Hobbit: The Desolation of Smaug" : "The dwarves,
along with Bilbo Baggins and Gandalf the Grey, continue their quest to reclaim
Erebor, their homeland, from Smaug. Bilbo Baggins is in possession of a
mysterious and magical ring."

db.movies.update(
{title: "The Hobbit: The Desolation of Smaug"},
{$set: {synopsis: "The dwarves,along with Bilbo Baggins and Gandalf the Grey, continue their quest to reclaim Erebor, their homeland, from Smaug. Bilbo Baggins is in possession of a mysterious and magical ring." }})


17) add an actor named "Samuel L. Jackson" to the movie "Pulp Fiction"
db.movies.update({title:"Pulp Fiction"},{$push: {actors: "Samuel L. Jackson"}})

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

18)find all movies that have a synopsis that contains the word "Bilbo"
db.movies.find({synopsis:/Bilbo/})

19)find all movies that have a synopsis that contains the word "Gandalf"
db.movies.find({synopsis:/Gandalf/})

20) find all movies that have a synopsis that contains the word "Bilbo" and not the
word "Gandalf"
db.movies.find({$and:[{synopsis:/Bilbo/},{synopsis: {$not:/Gandalf/}}]}).pretty()

21) find all movies that have a synopsis that contains the word "dwarves" or
"hobbit"
db.movies.find({$or:[{synopsis:/dwarves/},{synopsis:/hobbit/}]}).pretty()

22) find all movies that have a synopsis that contains the word "gold" and
"dragon"
db.movies.find({$and:[{synopsis:/gold/},{synopsis:/dragon/}]}).pretty()

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

23) delete the movie "Pee Wee Herman's Big Adventure"
db.movies.remove({title:"Pee Wee Herman's Big Adventure"})

24) delete the movie "Avatar"
db.movies.remove({ title:"Avatar"})


------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

25) Insert the following documents into a users collection
username : GoodGuyGreg
first_name : "Good Guy"
last_name : "Greg"

db.users.insert({username : "GoodGuyGreg", first_name : "Good Guy", last_name : "Greg"})


26) username : ScumbagSteve
full_name :
first : "Scumbag"
last : "Steve"

db.users.insert({username : "ScumbagSteve",    
 full_name:{      
  first:"Scumbag",      
  last:"Steve"     
  }  
 } 
)

27) Insert the following documents into a posts collection
 username : GoodGuyGreg
 title : Passes out at party
 body : Wakes up early and cleans house

db.posts.insert({ username : "GoodGuyGreg", title : "Passes out at party", body : "Wakes up early and cleans house" })

28) username : GoodGuyGreg
    title : Steals your identity
	body : Raises your credit score
	
db.posts.insert({ username : "GoodGuyGreg", title : "Steals your identity", body : "Raises your credit score" } )
	

29)
username : GoodGuyGreg
title : Reports a bug in your code
body : Sends you a Pull Request

db.posts.insert({ username : "GoodGuyGreg", title : "Reports a bug in your code", body : "Sends you a Pull Request" } )


30)
username : ScumbagSteve
title : Borrows something
body : Sells it

db.posts.insert({ username : "ScumbagSteve", title : "Borrows something", body : "Sells it"} )


31) 
username : ScumbagSteve
title : Borrows everything
body : The end


db.posts.insert({ username : "ScumbagSteve", title : "Borrows something", body : "Sells it"} )


32)
username : ScumbagSteve
title : Borrows everything
body : The end

db.posts.insert({ username : "ScumbagSteve", title : "Borrows everything", body : "The end"})

33)
username : ScumbagSteve
title : Forks your repo on github
body : Sets to private

db.posts.insert({ username : "ScumbagSteve", title : "Forks your repo on github", body : "Sets to private"})


34)INSERT THE FOLLOWING DOCUMENTS INTO A COMMENTS COLLECTION
username : GoodGuyGreg
comment : Hope you got a good deal!
post : [post_obj_id]
where [post_obj_id] is the ObjectId of the posts document: "Borrows something"
 
db.comments.insert({ username : "GoodGuyGreg", comment : "Hope you got a good deal!", post : ObjectId("5d5a8ed508065370d08d32d4") })

35) 
username : GoodGuyGreg
comment : What's mine is yours!
post : [post_obj_id]

db.comments.insert({ username : "GoodGuyGreg", comment : "What's mine is yours!", post : ObjectId("5d5a8fec08065370d08d32d5") })


36)
username : GoodGuyGreg
comment : Don't violate the licensing agreement!
post : [post_obj_id]

db.comments.insert({ username : "GoodGuyGreg", comment : "Don't violate the licensing agreement!", post : ObjectId("5d5a903708065370d08d32d6")})


37)
username : ScumbagSteve
comment : It still isn't clean
post : [post_obj_id]

db.comments.insert({ username : "ScumbagSteve", comment : "It still isn't clean", post : ObjectId("5d5a8dbe08065370d08d32d1") })

38)
username : ScumbagSteve
comment : Denied your PR cause I found a hack
post : [post_obj_id]

db.comments.insert({ username : "ScumbagSteve", comment : "Denied your PR cause I found a hack", post : ObjectId("5d5a8e7f08065370d08d32d3")})





39) find all users
 db.users.find().pretty()
 
40) find all posts
db.posts.find().pretty()

41) find all posts that was authored by "GoodGuyGreg"
 db.posts.find({username:"GoodGuyGreg"}).pretty()
 
42) find all posts that was authored by "ScumbagSteve"
 db.posts.find({username:"ScumbagSteve"}).pretty()
 
43) find all comments
 db.comments.find().pretty()
 
44) find all comments that was authored by "GoodGuyGreg"
db.comments.find({username:"GoodGuyGreg"}).pretty()

45) find all comments that was authored by "ScumbagSteve"
db.comments.find({username:"ScumbagSteve"}).pretty()


46) find all comments belonging to the post "Reports a bug in your code"
db.comments.find({post: ObjectId("5d5a8e7f08065370d08d32d3")})


47) how to export collection to JSON
mongoexport -d mongo_practice -c myOwn -o C:\Users\prabhkot\Desktop\assignment.json

48) how to import collection from JSON
mongoimport -d mongo_practice -c myRental --file C:\Users\prabhkot\Desktop\assignment.json

